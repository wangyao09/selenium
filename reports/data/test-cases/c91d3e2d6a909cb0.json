{"uid":"c91d3e2d6a909cb0","name":"test_baidu_search_case[data2]","fullName":"test_cases.test_baidu_input.TestBaidu#test_baidu_search_case","historyId":"cafd926c832fe1d845ade1f046ccd702","time":{"start":1719591441307,"stop":1719591444116,"duration":2809},"status":"failed","statusMessage":"AssertionError: Expected title 'unittest', but got 'unittest_百度搜索'\nassert 'unittest_百度搜索' == 'unittest'\n  - unittest\n  + unittest_百度搜索\n  ?         +++++","statusTrace":"self = <test_baidu_input.TestBaidu object at 0x0000024088894E50>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"179d0948b9e630d6538810e3e0b82d7c\")>\ndata = {'expected_title': 'unittest', 'index': '3', 'term': 'unittest'}\n\n    @pytest.mark.parametrize(\"data\", read_yaml(\"input_data.yaml\")[\"search_terms\"])\n    def test_baidu_search_case(self, driver, data):\n        search_term = data[\"term\"]\n        expected_title = data[\"expected_title\"]\n        index = data[\"index\"]\n    \n        page = BaiduPage(driver)\n        page.open()\n        page.search_input(search_term)\n        page.search_button()\n        sleep(2)\n        # 获取当前页面的标题\n        actual_title = driver.title\n        # assert actual_title == expected_title, f\"Expected title '{expected_title}', but got '{actual_title}'\"\n    \n        try:\n            # 断言标题是否与预期相符\n            assert actual_title == expected_title, f\"Expected title '{expected_title}', but got '{actual_title}'\"\n        except AssertionError as e:\n            # 捕获断言错误并打印提示信息，而不是抛出错误\n            # 捕获断言错误并打印更详细的提示信息\n            print(f\"参数{index}：'{search_term}'断言失败:\")\n            print(\"预期：\" + expected_title)\n            print(\"实际：\" + actual_title)\n            # 打印出当前参数信息\n            print(f\"参数信息：{data}\")\n            # 将 AssertionError 抛出，这样 pytest 仍能够正确识别测试失败\n>           raise e  # 可以选择注释掉这行，以便只打印信息，而不抛出错误\n\ntest_cases\\test_baidu_input.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_baidu_input.TestBaidu object at 0x0000024088894E50>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"179d0948b9e630d6538810e3e0b82d7c\")>\ndata = {'expected_title': 'unittest', 'index': '3', 'term': 'unittest'}\n\n    @pytest.mark.parametrize(\"data\", read_yaml(\"input_data.yaml\")[\"search_terms\"])\n    def test_baidu_search_case(self, driver, data):\n        search_term = data[\"term\"]\n        expected_title = data[\"expected_title\"]\n        index = data[\"index\"]\n    \n        page = BaiduPage(driver)\n        page.open()\n        page.search_input(search_term)\n        page.search_button()\n        sleep(2)\n        # 获取当前页面的标题\n        actual_title = driver.title\n        # assert actual_title == expected_title, f\"Expected title '{expected_title}', but got '{actual_title}'\"\n    \n        try:\n            # 断言标题是否与预期相符\n>           assert actual_title == expected_title, f\"Expected title '{expected_title}', but got '{actual_title}'\"\nE           AssertionError: Expected title 'unittest', but got 'unittest_百度搜索'\nE           assert 'unittest_百度搜索' == 'unittest'\nE             - unittest\nE             + unittest_百度搜索\nE             ?         +++++\n\ntest_cases\\test_baidu_input.py:36: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1719591427019,"stop":1719591433146,"duration":6127},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"afterStages":[{"name":"driver::0","time":{"start":1719591444124,"stop":1719591447246,"duration":3122},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('driver')"},{"name":"parentSuite","value":"test_cases"},{"name":"suite","value":"test_baidu_input"},{"name":"subSuite","value":"TestBaidu"},{"name":"host","value":"DESKTOP-GN70GCN"},{"name":"thread","value":"7084-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_baidu_input"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'index': '3', 'term': 'unittest', 'expected_title': 'unittest'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures('driver')"]},"source":"c91d3e2d6a909cb0.json","parameterValues":["{'index': '3', 'term': 'unittest', 'expected_title': 'unittest'}"]}